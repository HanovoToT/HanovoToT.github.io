{"meta":{"title":"WELCOME","subtitle":"","description":"GO","author":"JH","url":"https://HanovoToT.github.io","root":"/"},"pages":[],"posts":[{"title":"1","slug":"nss2","date":"2022-04-12T16:03:10.704Z","updated":"2022-04-12T16:10:56.734Z","comments":true,"path":"2022/04/13/nss2/","link":"","permalink":"https://hanovotot.github.io/2022/04/13/nss2/","excerpt":"","text":"[SWPUCTF 2021 新生赛]easy_sql 难得的相见如故 查询到有3个字段数 再进行查表查字段，发现flag就在这","categories":[],"tags":[]},{"title":"php伪协议","slug":"nss1","date":"2022-04-12T14:00:23.099Z","updated":"2022-04-12T16:11:18.886Z","comments":true,"path":"2022/04/12/nss1/","link":"","permalink":"https://hanovotot.github.io/2022/04/12/nss1/","excerpt":"","text":"php伪协议 php://filter经常使用的一种伪协议，一般用于任意文件读取，有时也可以用于getshell.在双OFF的情况下也可以使用. php://filter是一种元封装器，用于数据流打开时筛选过滤应用。这对于一体式（all-in-one）的文件函数非常有用。类似readfile()、file()、file_get_contents(),在数据流读取之前没有机会使用其他过滤器。 php://filter参数 提示flag在flag.php中 现在具体说说file=php://filter/read=convert.base64-encode/resource=index.php的含义 首先这是一个file关键字的get参数传递，php://是一种协议名称，php://filter/是一种访问本地文件的协议，/read=convert.base64-encode/表示读取的方式是base64编码后，resource=index.php表示目标文件为index.php。 通过传递这个参数可以得到index.php的源码，下面说说为什么，看到源码中的include函数，这个表示从外部引入php文件并执行，如果执行不成功，就返回文件的源码。 而include的内容是由用户控制的，所以通过我们传递的file参数，是include（）函数引入了index.php的base64编码格式，因为是base64编码格式，所以执行不成功，返回源码，所以我们得到了源码的base64格式，解码即可。 如果不进行base64编码传入，就会直接执行，而flag的信息在注释中，是得不到的。","categories":[],"tags":[]},{"title":"一些题目","slug":"nss","date":"2022-03-31T07:41:06.479Z","updated":"2022-03-31T10:06:04.056Z","comments":true,"path":"2022/03/31/nss/","link":"","permalink":"https://hanovotot.github.io/2022/03/31/nss/","excerpt":"","text":"尝试输入后，发现只有输入数字才存在下面回显，输入字母和字符没有回显 改为输入1’ 发现回显消失，发现注入漏洞 在使用order by 过滤时，均显示nonono联合查询无法使用，尝试盲注后，发现布尔和时间盲注也不法使用去查了一下，可以使用堆叠注入继续搜索表，发现一个flag的表，但搜索该数据又显示了nonono 又查了一下 通过只返回数字推出存在 || （这个是什么）？？ or","categories":[],"tags":[]},{"title":"学习","slug":"less 14","date":"2022-02-17T11:28:42.824Z","updated":"2022-02-17T12:34:13.338Z","comments":true,"path":"2022/02/17/less 14/","link":"","permalink":"https://hanovotot.github.io/2022/02/17/less%2014/","excerpt":"","text":"less 14 15 16同less 13,仅包裹方式不同14 “”15 ‘’16 （“”）","categories":[],"tags":[]},{"title":"学习","slug":"less 11","date":"2022-02-11T07:47:48.685Z","updated":"2022-02-12T08:24:13.045Z","comments":true,"path":"2022/02/11/less 11/","link":"","permalink":"https://hanovotot.github.io/2022/02/11/less%2011/","excerpt":"","text":"less11.12进入后类似一个登录界面在用户名处测试出存在注入漏洞与前十关不同的是less 11使用的是post使用burp suite，后面的步骤与前面的一致 less 13仅显示登录成功但未显示出用户名和密码所以无法使用前两关的方式只能使用盲注来进行 { if语句 uname=a’) or if (length(database())&gt;X,1,sleep(3))#&amp;passwd=admin&amp;submit=Submit可以判断出数据库长度再使用leftleft（database(),1) ; left（database(),1)&gt;’a ‘uname=a’) or if (length(database())&gt;X,1,sleep(3))#&amp;passwd=admin&amp;submit=Submit判断出数据库","categories":[],"tags":[]},{"title":"学习","slug":"less 8","date":"2022-01-19T13:59:58.080Z","updated":"2022-01-22T12:30:58.024Z","comments":true,"path":"2022/01/19/less 8/","link":"","permalink":"https://hanovotot.github.io/2022/01/19/less%208/","excerpt":"","text":"less8找到注入点，使用id=1‘后面按照前几关的步骤进行，得到结果开始还是得多自己进行手打，对这些代码还是不熟悉，得多练习less 9-10就还是这样子吧，差不多的步骤。 这三关都可以使用时间盲注的方法来使用。if函数if（1，2，3）若1为真，则执行2，否则执行3通过此方法，通过检测数据库长度，或是数据库的ascii值，以及页面的刷新速度，来检测出数据库以及我们所需。","categories":[],"tags":[]},{"title":"less 7","slug":"less 7","date":"2021-11-17T07:05:53.449Z","updated":"2021-11-17T15:15:48.103Z","comments":true,"path":"2021/11/17/less 7/","link":"","permalink":"https://hanovotot.github.io/2021/11/17/less%207/","excerpt":"","text":"一句话木马 &lt;?php @eval($_POST[pass]);?&gt; select ‘something’ into outfile ‘where’ 将 something 写入where(where可以是文件也可以是指定的路径//使用双斜线来代替斜线) select load_file（) 读取本地文件 解题心得 首先还是试出？id=1’))–+ 根据题目的提示知道使用outfile函数 再测出其有三列后，使用outfile函数将一句话病毒写入less7的目录下 将http://localhost/Less-7/1.php输入至中国菜刀，密码为a 成功","categories":[],"tags":[]},{"title":"less 5","slug":"less 5","date":"2021-11-15T14:17:53.582Z","updated":"2021-11-15T15:19:05.398Z","comments":true,"path":"2021/11/15/less 5/","link":"","permalink":"https://hanovotot.github.io/2021/11/15/less%205/","excerpt":"","text":"bool盲注出现情况：正确时返回一个结果，错误时不返回任何数值 解题过程: * 直接使用order by判读出其有三列 * 但无法直接使用联合查询 * 使用了left函数","categories":[],"tags":[]},{"title":"~~初学PHP【4】","slug":"php初学4","date":"2021-10-30T08:05:51.514Z","updated":"2021-11-01T14:23:45.970Z","comments":true,"path":"2021/10/30/php初学4/","link":"","permalink":"https://hanovotot.github.io/2021/10/30/php%E5%88%9D%E5%AD%A64/","excerpt":"","text":"strlen() 函数 返回值为字符串的长度 *输出 6 运算符 x&lt;&gt;y 为不等于 x！==y 为绝对不等于（数值或类型不等） x xor y 为x.y有且仅有一个为true则返回true x===y 为绝对相等组合比较符 可以实现两个变量的比较，不限于数值类数据的比较 例如： $c = $a &lt;=&gt; $b * 如果 $a &gt; $b, 则 $c 的值为 1。 * 如果 $a == $b, 则 $c 的值为 0。 * 如果 $a &lt; $b, 则 $c 的值为 -1。 数组 ID键从0开始 $s=array( “a”,”b”,”c”) sort() - 对数组进行升序排列 rsort() - 对数组进行降序排列 asort() - 根据关联数组的值，对数组进行升序排列 ksort() - 根据关联数组的键，对数组进行升序排列 arsort() - 根据关联数组的值，对数组进行降序排列 krsort() - 根据关联数组的键，对数组进行降序排列 超级全局变量 * $GLOBALS * $_SERVER * $_REQUEST * $ _POST * $_FILES * $_ENV * $_COOKIE * $_SESSION","categories":[],"tags":[]},{"title":"~~初学PHP【3】","slug":"php初学3","date":"2021-10-25T15:20:09.098Z","updated":"2021-10-30T08:09:20.452Z","comments":true,"path":"2021/10/25/php初学3/","link":"","permalink":"https://hanovotot.github.io/2021/10/25/php%E5%88%9D%E5%AD%A63/","excerpt":"","text":"PHP EOF(heredoc) 输出 1111 2222 必须后接分号，否则编译通不过。 EOF 可以用任意其它字符代替，开头与结尾需一致。 结束标识必须顶格独自占一行(即必须从行首开始，前后不能衔接任何空白和字符)。 php数据类型 整型 * 至少一个数字 * ## 无 空格，逗号，小数 * 十进制 十六进制（0x） 八进制（0） 浮点型 * 带小数部分的数字或是指数 布尔型 用于判断【true || false】 数组 //整形 浮点型 数组 应使用var_dump($x) 注：var _dump返回的是表达式的 类型与值，更利于阅读 php类型比较* 松散比较：只比较值 * 严格比较：比较类型与值 输出： 1、值相等 3、类型不相等 {“42”为字符串，42为整数 } 常量 ！不能由数字开头，不能用$修饰，定义的常量默认为全局变量 设置常量使用define函数（如下） 输出为:JHNB JHNB * 加入true后，可以不计大小写(echo PHP_EOL为换行 ) 并置运行符 strpos() 函数 用于在字符串查找一个字符或一段指定的文本返回值为6（从0开始）","categories":[],"tags":[]},{"title":"~~php初学【2】","slug":"php初学2","date":"2021-09-22T04:19:06.000Z","updated":"2021-10-25T03:52:06.870Z","comments":true,"path":"2021/09/22/php初学2/","link":"","permalink":"https://hanovotot.github.io/2021/09/22/php%E5%88%9D%E5%AD%A62/","excerpt":"","text":"PHP global 关键字 用于调用全局变量 Static作用域 * 使一个变量在下次调用是仍为上次计算后的值 参数作用域 * 需注意 function mytest（$变量） echo 和 print 语句 二者区别 * echo 可以输出一个至多个字符串 * echo 仅可以输出一个字符串&amp;&amp;返回值为1 二者相同 * 括号的使用与否均可","categories":[],"tags":[]},{"title":"~~初学PHP【1】","slug":"php初学1","date":"2021-09-22T04:09:18.910Z","updated":"2021-10-24T10:49:05.708Z","comments":true,"path":"2021/09/22/php初学1/","link":"","permalink":"https://hanovotot.github.io/2021/09/22/php%E5%88%9D%E5%AD%A61/","excerpt":"","text":"什么是PHP? PHP（全称：PHP：Hypertext Preprocessor，即”PHP：超文本预处理器”）是一种通用开源脚本语言。 开始与结束 PHP 脚本以 结束： （同c一样以 ‘ ; ‘ 为结尾） 注释 ‘ // ‘ 为行注释 &#39; /*(多行内容)*/ &#39; 为块注释 变量 变量规则： 变量 以 $ 符号开始，后面跟着变量的名称 变量名 必须以字母或者下划线字符开始 变量名 只能包含字母、数字以及下划线（A-z、0-9 和 _ ） 变量名 不能包含空格 变量名 是区分大小写的（$y 和 $Y 是两个不同的变量） PHP 语句和 PHP 变量都是区分大小写的。 变量作用域在所有函数外部定义的变量，拥有全局作用域。其可以被脚本中的任何部分访问（访问方法：使用global关键字）","categories":[],"tags":[]}],"categories":[],"tags":[]}